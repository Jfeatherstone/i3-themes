#!/bin/sh
# changeVolume

# This file assumes pulseaudio is your audio manager, not alsa

# Arbitrary but unique message id so that notifcations for dunst overlap
msgId="991049"

# First check to see if we are toggling mute

mute="`pactl list sinks | grep Mute | awk '{print $2}'`"

if [ $1 == "toggle" ]; then
    pactl set-sink-mute @DEFAULT_SINK@ "$@"
    if [ "$mute" == "yes" ]; then
        dunstify -a "changeVolume" -u low -i audio-headphones -r "$msgId" "Volume Unmuted" ""
    elif [ "$mute" == "no" ]; then
        dunstify -a "changeVolume" -u low -i audio-headphones -r "$msgId" "Volume Muted" ""
    fi

    exit
fi

# Otherwise, we check if the volume will be between 0-100, otherwise we ignore it
# You can manually override this max using pavu, but it shouldn't be used as often

# Use pactl to get current volume and whether or not the speaker is muted
volume="`pactl list sinks | grep Volume | awk '$1 ~ /Volume/ {print $5}' | sed 's/%//g'`"


# If the speakers are currently muted, we want to unmute them

volumeIncrement=`echo $@ | sed 's/%//g'`

if [[ $volume$volumeIncrement -le 100 ]] && [[ $volume$volumeIncrement -gt 0 ]]; then
    # New volume will be between 0-100 so we set it and unmute just to be sure
    pactl set-sink-mute @DEFAULT_SINK@ no
    pactl set-sink-volume @DEFAULT_SINK@ "$@"
elif [[ $volume$volumeIncrement -le 0 ]]; then
    pactl set-sink-volume @DEFAULT_SINK@ 0%
elif [[ $volume$volumeIncrement -gt 100 ]]; then
    pactl set-sink-mute @DEFAULT_SINK@ no
    pactl set-sink-volume @DEFAULT_SINK@ 100%
fi
 
newVolume="`pactl list sinks | grep Volume | awk '$1 ~ /Volume/ {print $5}' | sed 's/%//g'`"

dunstify -a "changeVolume" -u low -i audio-headphones -r "$msgId" "Volume: $newVolume%"

# Play the volume changed sound
# canberra-gtk-play -i audio-volume-change -d "changeVolume"
